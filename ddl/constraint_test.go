package ddl

import (
	"testing"
)

func Test_AddConstraintCommnd(t *testing.T) {
	type TT struct {
		dialect   string
		item      Command
		wantQuery string
		wantArgs  []interface{}
	}

	// assert := func(t *testing.T, tt TT) {
	// 	gotQuery, gotArgs, _, err := sq.ToSQL(tt.dialect, tt.item)
	// 	if err != nil {
	// 		t.Fatal(testcallers(), err)
	// 	}
	// 	if diff := testdiff(gotQuery, tt.wantQuery); diff != "" {
	// 		t.Error(testcallers(), diff)
	// 	}
	// 	if diff := testdiff(gotArgs, tt.wantArgs); diff != "" {
	// 		t.Error(testcallers(), diff)
	// 	}
	// }
	//
	// t.Run("(dialect == postgres) IDENTITY column", func(t *testing.T) {
	// 	t.Parallel()
	// 	var tt TT
	// 	tt.item = AddConstraintCommand{}
	// 	tt.dialect = sq.DialectPostgres
	// 	tt.wantQuery = `ADD COLUMN IF NOT EXISTS actor_id INT NOT NULL GENERATED BY DEFAULT AS IDENTITY COLLATE "C"`
	// 	assert(t, tt)
	// })
}
