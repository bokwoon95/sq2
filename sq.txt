sq.go
param.go
fmt.go
predicate.go
rowvalue.go
generic_table.go
generic_field.go <-> custom_field.go <-> assignment.go
blob_field.go | boolean_field.go | json_field.go | numberfield.go | string_field.go | time_field.go

BeforeQuery Hook
AfterQuery Hook
Before the query gets run by Fetch/Exec, you have the option to reach in and manipulate that query into one or more queries which are then run one after the other.
This is incredibly powerful for things like audit logging (INSERT into an audit table after any sensitive SELECT/INSERT/UPDATE/DELETE), as well as enforcing an application-wide constraints like for application-level temporal tables.
AfterQuery hook -could- be used to replace the logger hook
More importantly AfterQuery gives you the option to add post-query triggers: queries that are run only if the previous query succeeded. You can use it to validate DB state after running a particular query, and raising an error if so.
By running the AfterQuery Hook with a transaction, it gives you the ability to run one or more arbitrary queries on the database after the initial query and rollback the entire transaction if you wish.

The only downside is if you modify the SELECTed column list before it hits the database, then whatever comes back will most likely cause the rowmapper to panic.
