> folders
>> files
>>> template sections

note: need to make multi-dialect queries prominent section later on. When I have a clear example of a codebase that supports multiple dialects at once using sq, then I can make it a selling point.

note: the query-building overhead can even be eliminated: queries can be compiled once and used over and over with speeds identical to raw sql querying with `database/sql`.

note: A single table struct can be used to generate DDL for all three SQL dialects. Dialect-specific DDL is supported. View an [example for the Sakila database](#), defined as structs, targeting [SQLite](#), [Postgres](#) and [MySQL](#) at once.

an entire h1 section dedicated to `ddl`
- need to include the entire reference list for struct annotations as well as the corresponding DDL() method (need to explain the DDL() method in the first place)

quickstart:
- here's a link to each SQL feature
- here's a link to each SQL query reference
- here's a link to the FAQs

== Basics ==

every section must be prefixed with a question

where does the FAQ go?

Quickstart

DDL

Basics

SQL

FAQ

cover DDL
- introduction covering how DDL works two ways (is this needed?)
    - show an example call that covers everything (tables, views, functions, extensions, enums, constraints, indexes, triggers)
- how to generate structs?
- how to define tables?
    - SQL types to sq types mapping (NumberField, StringField, etc)
        - Numbers -> NumberField
        - Strings -> StringField
        - time.Time -> TimeField
        - JSON -> JSONField
        - []byte -> BlobField
        - uuid.UUID -> UUIDField
        - arrays, tsvector, everything else -> CustomField
    - struct annotations
    - DDL() method
- how to define views?
- how to define functions?
- how to define extensions? (postgres only)
- how to define enums?
- how to define constraints?
    - struct annotations
    - DDL() method
- how to define indexes?
    - struct annotations
    - DDL() method
- how to define triggers?
    - struct annotations
    - DDL() method
- how to handle migration?
    - AutoMigrate
    - Migrate

[How do I run queries that return data?]
cover FetchOne/FetchSlice
- cover Fetch, but present it as the Last Resort

[How do I run queries that don't return data?]
cover Exec

don't cover ToSQL

[How do I do a complex SQL expression?]
cover Fieldf/Predicatef/Tablef/Queryf
- which covers the printf-style formatting
    - advanced topic: explain how anything that implements AppendSQL or AppendSQLExclude will get expanded. also explain the difference between AppendSQL and AppendSQLExclude
- mention how calling custom functions can be done via Fieldf/Predicatef/Tablef

How do I write multi-dialect queries?
- mention how all dialects query builders are basically the same query builder struct
- mention how the params style changes based on the query builder dialect
- mention how the identifier quoting style changes based on the query builder dialect

Can I build a just query once and reuse it for every request?

cover Logging
- logging must be enabled manually for each query (via the DB interface)

== Query Building ==

SELECT reference

INSERT reference

UPDATE reference

DELETE reference

How do I reuse the same predicate across SELECT/UPDATE/DELETE?

== SQL ==

RETURNING
Joins
AS (Aliases)
UNION, INTERSECT, EXCEPT
Aggregate functions
Window functions
Subqueries
WITH (Common Table Expressions)
Recursive Queries
DISTINCT
ORDER BY
GROUP BY HAVING
JSON
ARRAY (postgres only)
IN
LIMIT OFFSET
CASE
"Tuples" (Row Value Expressions) (mark this as important somehow because people are not going to know wtf it is)
VALUES
